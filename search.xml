<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[first]]></title>
    <url>%2F2018%2F03%2F30%2FAI%E8%AF%95%E9%AA%8C%2Ffirst%2F</url>
    <content type="text"><![CDATA[逻辑回归： Step1: 得到“证据”evidence 权重 ：首先对图片像素值加权求和，如果该像素强有力的说明该图片属于该类别，那么权重为正数，否则为负值。偏置(bias)：手写的图片有一定的干扰量，加入偏置b 此时证据Evidence 表示为： $$evdi =\left( \sum\nolimits{j\in J}w{i,j}\times x{j} + b{i}\right)$$ 其中$w_i,_j$ 代表权重]]></content>
      <tags>
        <tag>AI试验</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从今天起开始学习C++ Primer]]></title>
    <url>%2F2017%2F07%2F02%2F%E4%BB%8E%E4%BB%8A%E5%A4%A9%E8%B5%B7%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0C-Primer%2F</url>
    <content type="text"></content>
      <tags>
        <tag>C++ Primer</tag>
        <tag>c语言</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[网易云]]></title>
    <url>%2F2017%2F05%2F18%2F%E7%BD%91%E6%98%93%E4%BA%91%2F</url>
    <content type="text"><![CDATA[This is the life]]></content>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2017%2F04%2F08%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[GIT COMMAND 本文转自https://github.com/lzjun567/note/tree/master/note [TOC] Git常用命令备忘 Git已经成为程序员日常工具之一，那些Git基本的命令，每天都要用得命令你都记住了吗？如果还没的话，笔者整理了一份清单，以备不时之需所用。 三个基本概念 工作区(Workspace)是计算机中项目的根目录 暂存区(Index)像个缓存区域，临时保存你的改动 版本库(Repository)分为本地仓库（Local)和远程仓库(Remote) 几乎所有常用命令就是围绕这几个概念来操作的，一图胜千言，下面是一张比较简单的图，包括了最基本的命令 但只会使用以上命令是不够的，在这个复杂纷繁的程序世界，事情没你想的那么简单，不过有些事情想想就够了，不一定要去做，真要去做你也做不来，比如自己写个git来，但是，更多地的了解git是我们每个程序员都可以做得到的事。再看下图： 下面的命令结合上面两张图来理解、练习、记忆效果更加。暂时用不着的命令记不住，不理解也没关系，哪天遇到问题，再来找找有没有合适的方法也不迟。 新建/克隆代码库$ git init #当前目录新建一个Git代码库 $ git init [project-name] #新建一个目录，将其初始化为Git代码库 $ git clone [url] #下载一个项目和它的整个代码历史 $ git fetch [url] #下载/同步项目到 添加/删除文件$ git add [file1] [file2] ... # 添加指定文件到暂存区 $ git add [dir] # 添加指定目录到暂存区，包括子目录 $ git add . # 添加当前目录的所有文件到暂存区 $ git rm [file1] [file2] ... # 删除工作区文件，并且将这次删除放入暂存区 $ git rm --cached [file] # 停止追踪指定文件，但该文件会保留在工作区 $ git mv [file-original] [file-renamed] # 改名文件，并且将这个改名放入暂存区 代码提交$ git commit -m [message] # 提交暂存区所有文件到仓库区，并指定提交说明 $ git commit [file1] [file2] ... -m [message] # 提交暂存区的指定文件到仓库区，并指定提交说明 $ git commit -a # 提交工作区自上次commit之后的变化，直接到仓库区。是git add 和 git commit的组合操作 $ git commit -v # 提交时显示所有diff信息 $ git commit --amend -m [message] # 使用一次新的commit，替代上一次提交 分支$ git branch # 列出所有本地分支 $ git branch -r # 列出所有远程分支 $ git branch -a # 列出所有本地分支和远程分支 $ git branch [branch-name] # 新建一个分支，但依然停留在当前分支 $ git checkout -b [branch] # 新建一个分支，并切换到该分支 $ git branch [branch] [commit] # 新建一个分支，指向指定commit $ git checkout [branch-name] # 切换到指定分支 $ git merge [branch] # 合并指定分支到当前分支 $ git branch -d [branch-name] # 删除本地分支 $ git push origin --delete [branch-name] # 方法一：删除远程分支 $ git branch -dr [remote/branch] # 方法二：删除远程分支 撤销$ git checkout [file] # 恢复暂存区的指定文件到工作区（注意区别分支操作中得checkout命令） $ git checkout [commit] [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout . # 恢复暂存区的所有文件到工作区 $ git reset [file] # 重置暂存区的指定文件，与最新的commit保持一致，但工作区不变 $ git reset --hard # 重置暂存区与工作区，与最新的commit保持一致 $ git reset [commit] # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset --hard [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --keep [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git revert [commit] # 新建一个commit，用来撤销指定commit 标签$ git tag # 列出所有tag $ git tag [tag] # 在当前commit新建一个tag $ git tag [tag] [commit] # 在指定commit新建一个tag $ git tag -d [tag] # 删除本地tag $ git push origin :refs/tags/[tagName] # 删除远程tag $ git show [tag] # 查看tag信息 $ git push [remote] [tag] # 提交指定tag $ git push [remote] --tags # 提交所有tag $ git checkout -b [branch] [tag] # 新建一个分支，指向某个tag 查看日志$ git status # 显示所有变更文件 $ git log # 显示当前分支的版本历史 $ git log --stat # 显示当前分支的版本历史，以及发生变更的文件 $ git blame [file] # 显示指定文件是什么人在什么时间修改过 $ git log -p [file] # 显示指定文件相关的每一次diff $ git diff # 显示暂存区和工作区的差异 $ git diff --cached [commit] # 显示暂存区和某个commit的差异 $ git diff HEAD # 显示工作区与当前分支最新commit之间的差异 $ git show [commit] # 显示某次提交的元数据和内容变化 $ git show --name-only [commit] # 显示某次提交发生变化的文件 $ git show [commit]:[filename] # 显示某次提交时，某个文件的内容 $ git reflog # 显示当前分支的最近几次提交 远程同步$ git fetch [remote] # 下载远程仓库的所有变动到暂存区 $ git remote -v # 显示所有远程仓库 $ git remote show [remote] # 显示某个远程仓库的信息 $ git remote add [shortname] [url] # 增加一个新的远程仓库，并命名 $ git pull [remote] [branch] # 取回远程仓库的变化，并与本地分支合并 $ git push [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] --force # 即使有冲突，强行推送当前分支到远程仓库 $ git push [remote] --all # 推送所有分支到远程仓库 设置git的配置文件是.gitconfig，支持全局配置和项目配置，全部配置对所有项目有效，用 --global选择指定。 $ git config --list #显示配置 $ git config -e [--global] #编辑(全局)配置文件 $ git config [--global] user.name &quot;xx&quot; #设置 commit 的用户 $ git config [--global] user.email &quot;xx@xx.com&quot; #设置 commit 的邮箱]]></content>
      <tags>
        <tag>git常用命令  git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gitpages搭建参考]]></title>
    <url>%2F2017%2F04%2F08%2Findex%2F</url>
    <content type="text"><![CDATA[[TOC] Gitpages 搭建过程参考链接http://www.jianshu.com/p/985d07d88ef4http://www.cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/]]></content>
      <tags>
        <tag>gitpages搭建参考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python电子书]]></title>
    <url>%2F2017%2F04%2F08%2Fpython%E7%94%B5%E5%AD%90%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[python 电子书 [TOC] 转自https://github.com/lzjun567/note/tree/master/note 电子书看到很多朋友经常问Python如何入门，入门之后还是非常迷茫、困惑。笔者有幸从业余的Python新手晋级为Python玩家，谈不上精通，尽管如此我还在不断地学习中。其实学习任何一门语言或者技能，没有什么捷径，无非就是学、实践、学、实践…我最开始触碰Python的动机是出于好奇，接触之后结果发现PYTHON真的非常诱人，开始是在网上看了几篇简单的入门教程，尝到甜头之后，于是在上网搜了一些专业书籍，决定系统的了解这门语言。大概啃了一个星期的书之后，觉得太没意思了，一直沉浸在课本知识中，时间一长，枯燥无比，人的意志力也被掏光了，没法继续往下读了，于是我停了下来，决定拿Python捣鼓点东西，我的第一个demo就是用Python写一个自动定时邮件发送的程序，后来自己搭建BLOG程序，再后来自己写爬虫，写API接口…于是就走到了今天。以下是我在学习过程中看过或者觉得有用的一些教程和书籍。 基础篇入门的教程就是要直达主题，越简单越好，不要太多的原理性知识，页码不用太厚，涉及的知识点不能往外延伸太广，如果学习一门语言还叫我先把操作系统，计算机原理学完才能看得懂教程的话，就不叫入门教程。 提高篇xxxx 扩展篇###扩展篇xxx 小白Python教程，Python3中文教程电子版 廖雪峰的小白python教程，有python2和python3两个版本： 简明Python教程 简明python教程，是《A Byte of Python》的中文版 零基础学Python 老齐（qiwsir）的Python基础教程Gitbook版 可爱的 Python 大妈（Zoom.Quiet）创意并组建团队，完全由 CPyUG 成员自发组织完成。 Python 2.7 官方教程中文版 Python 3.3 官方教程中文版 《Python Cookbook》 3rd Edition中文版 注重实践的一本书，但不适合初学者。 深入 Python 3 《dive into python3》的中译版。 PEP8 Python代码风格规范 Google Python 风格指南 中文版 写python的人都应该遵循的原则。 Python入门教程 (PDF) Python 官方入门的中文翻译版（主页）。翻译工程属于 O.B.P 计划的一部分，主要翻译者为刘鑫与 DocsPy3zh, 校对为 Zoom.Quiet。 Python的神奇方法指南 有关Python内编写类的各种技巧和方法(构建和初始化、重载操作符、类描述、属性访问控制、自定义序列、反射机制、可调用对象、上下文管理、构建描述符对象、Pickling)。你可以把它当作一个教程，进阶，或者使用参考 笨办法学 Python （PDF版下载） 《Learn Python The Hard Way》中译版 Python学习笔记 stackoverflow上Python相关回答整理翻译 stackoverflow上python相关的热门问题 Python 指南 The Hitchhiker’s Guide to Python中文版 Django 1.8.2 文档中文版 Django 最佳实践 Django搭建简易博客教程 The Django Book 中文版 web.py 0.3 新手指南 Web.py Cookbook 简体中文版 Flask 文档中文版 Jinja2 文档中文版 Werkzeug 文档中文版 Flask之旅 Introduction to Tornado 中文翻译 Python自然语言处理中文版 Python 绘图库 matplotlib 官方指南中文翻译 Scrapy 0.25 文档 ThinkPython Python快速教程 Python 正则表达式操作指南 python初级教程：入门详解 Twisted 与异步编程入门 TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 ) Requests: HTTP for Humans Pillow 中文文档 PyMOTW 中文版 Fabric 中文文档 The Flask Mega-Tutorial 中文 Tornado源码解析 Tornado 4.3 文档中文版]]></content>
      <tags>
        <tag>电子书推荐 python</tag>
      </tags>
  </entry>
</search>
